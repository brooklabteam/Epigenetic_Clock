##Script to align probes to masked shrew genome
#Main author: Marie-Laurence Cossette
#code is based on Amin Haghani’s to accompany Wilkinson et al. 2021. Genome Methylation Predicts Age and Longevity of Bats. Nature Communications
#https://figshare.com/articles/online_resource/Genome_Alignment_and_Annotation/13526540?backTo=/collections/Supporting_files_for_Wilkinson_et_al_2021_Genome_Methylation_Predicts_Age_and_Longevity_of_Bats/5257271


#download probe sequences from Dropbox
#MammalianArrayNormalizationTools/manifests/HorvathMammal40.Manifest.May2020.manifest.csv
#file too large to send to remote, need to split and reassemble, use -l to split by lines and keep rows together  
split -l 100 Downloads/HorvathMammal40.Manifest.May2020.manifest.csv ./splits/
#send over to remote
scp -r splits/* mlcosset@gra-dtn1.computecanada.ca:/home/mlcosset/projects/rrg-shaferab/mlcosset/Methylation
#put back together
cat * > manifest
#can remove split files now
#check shasum for initial file and file put back together
shasum -a 512 Downloads/HorvathMammal40.Manifest.May2020.manifest.csv 
#513625b6e07e8a37e9138f8cc29eb0f569a4443f36ad39546905dbd284199a587ce02d2882660580a4da620b281fbe776954e04c8e0200e99ae5cee290159395

#trying to make fasta file from manifest (which is a csv file) for probe sequences
#keep IlmnID (CpG ID name) and SourceSeq (CpG’s sequence of 50bp) columns 
awk -F',' '{print $1,$19}' manifest > manifest.txt
#remove quotes before and after each word/entry
awk -F\" '{$1=$1}1' manifest.txt > manifest_clean.txt
#remove all extra rows that are not CGs, look at data set and remove whatever lines that are not needed
sed '37490,38609d' manifest_clean.txt > probes.txt
#remove first row to remove column names
tail -n +2 probes.txt > probes_try
#merge both IlmnID and SourceSeq columns into one
tr -s ' '  '\n'< probes_try > probes_order
#add > to every second line starting with first to have a fasta format
sed '1~2s/^/>/' probes_order > probes.fa

#final file should look like this
#>cg00000165
#AGGATCTGTTAGTACAGTGGCTTTTGATGGAACAGCTGAGGCACACATCG
#>cg00001209
#CTTAACATTATAAGCAGAACAAAGTGGTACAAAATGTATTCAGCCTCACG
#>cg00001364
#CCAGTTTGATATGGATCGCTTATGTGATGAGCACCTGAGAGCAAAGCGCG
#>cg00001582
#GCCCTTTGGAAATAGAATAGCCAATGTAATCTGACACTTCAACTTGCTCG
#>cg00002920
#CATAGTTTATTTTCTTAAAGTATTAATTTGTCAACAGCTTCCCTGCCTCG

#to align probes to genome need to use nano to create sampleFile that should look like this, (tab between each word):
#FileName	SampleName
#probes.fa	Sample1

#the alignment pipeline require the genome fasta file and annotation GFF or GTF files. 

#script to align masked shrew genome with probes.fa, to use R with scheduler make another script and link it here
#you need to have your actual Rscript (qAlign_R.R) before to run this bash script
#qAlign_R.bash

#!/bin/bash
#SBATCH --account=rrg-shaferab
#SBATCH --mem=32G
#SBATCH --time=00-06:00 # time (DD-HH:MM)
#SBATCH --mail-type=ALL
#SBATCH --mail-user=mcossette@trentu.ca
module load r/4.1.0
Rscript qAlign_R.R

#install prior to qAlign_R.bash on R in terminal
if (!requireNamespace("BiocManager", quietly = TRUE))
  install.packages("BiocManager")
BiocManager::install("QuasR")

#make this script in a new nano file
#the result will be saved in bam format
#qAlign_R.R

library(QuasR)
alignment <- qAlign("sampleFile", genome="Sorex_cinereus.fasta", bisulfite = "undir", alignmentParameter = "-k 2 --strata --best -v 3")

#renamed output and look at how many probes were mapped
samtools flagstat probes_sc.bam
#29608 + 0 mapped (78.98% : N/A)

#alignment done now need to modify the original HorvathMammal40.Manifest.May2020.manifest.csv again but now keeping it as txt file
#Only keep necessary before importing in R
#keep IlmnID (CpG ID name), SourceSeq (CpG’s sequence of 50bp) and StrandTB (strand information) columns 
awk -F',' '{print $1,$14,$19}' manifest > manifest_1.txt
#remove quotes
awk -F\" '{$1=$1}1' manifest_1.txt > manifest_clean_1.txt
#remove all extra rows not CGs, look at data set and remove whatever lines
sed '37490,38609d' manifest_clean_1.txt > probes_1.txt

#open r/4.1.0 and do the rest of the code through R in command line on terminal
module load r/4.1.0
R

#load packages necessary
BiocManager::install("Rsamtools")
BiocManager::install(“parallel”)
BiocManager::install("ChIPseeker")
library(ChIPseeker)
library(tidyr)
library(dplyr)
library(parallel)
library(Rsamtools)
library(data.table)

#change bam file to data frame 
aln <- BamFile("probes_sc.bam")
aln <- scanBam(aln)
aln <- as.data.frame(aln[[1]])

# Determination of CG location based on the probe design. The probe is designed by either top or bottom strand. 
#import the modified HorvathMammal40.Manifest.May2020.manifest.csv file
manifest <- read.table("probes_1.txt", header=TRUE, sep = "")

#add a new column “targetCG” based on values in StrandTB. If StrandTB is B targetCG = 49:50 and if T = 1:2
manifest <- mutate(manifest, targetCG = ifelse(StrandTB == "B", "49:50", "1:2"))                       
#make sure targetCG is in df and is according to StrandTB
head(manifest, n=20)

#select only columns needed in manifest then rename IlmnID column to qname then join the manifest df to the aln df using qname then change targetCG to character
aln_1 <- manifest %>% dplyr::select(IlmnID, SourceSeq, targetCG) %>% dplyr::rename(qname = IlmnID) %>% right_join(aln, by="qname")%>% 
  mutate(targetCG = as.character(manifest$targetCG))

#save
save(aln_1, file=“aln_1”)

#combine a bunch of info together to create CGcount
CGcount <- rbindlist(lapply(1:nrow(aln_1), function(i){
  pattern <- DNAString(as.character(aln_1$SourceSeq[i]))
  subject <- DNAString(aln_1$seq[i])
  matches <- matchPattern(pattern, subject, max.mismatch = 0, algorithm = "naive-inexact")
  locations = paste(start(matches), end(matches), sep=":")
  pattern2 <-reverseComplement(DNAString(as.character(aln_1$SourceSeq[i])))
  matches2 <- matchPattern(pattern2, subject, max.mismatch = 0, algorithm = "naive-inexact")
  locations2 = paste(start(matches2), end(matches2), sep=":")
  hits <- data.frame(qname=aln_1$qname[i],
                     CGcount = length(start(matches))+length(start(matches2)), 
                     forward = paste(locations, collapse = " ; "),
                     reverse = paste(locations2, collapse = " ; "))
}))

aln_1$alignedStand <- ifelse(CGcount$forward!="", "forward", "complementReverse")
aln_1$targetCG <- ifelse(aln_1$alignedStand=="forward", aln_1$targetCG, 
                       ifelse(aln_1$alignedStand=="complementReverse"&aln_1$targetCG=="1:2", "49:50",
                              ifelse(aln_1$alignedStand=="complementReverse"&aln_1$targetCG=="49:50", "1:2",NA)))
aln_1$targetCG <- as.numeric(as.character(factor(aln_1$targetCG, levels = c("1:2", "49:50"), labels = c(0,48))))
aln_2 <- aln_1 %>% filter(!is.na(pos))

#save as csv
write.csv(aln_2, "aln_2.csv")

#convert to GRange to be able to combine with annotations 
input <- aln_2 %>% dplyr::select(qname, rname, strand, pos) %>% dplyr::filter(complete.cases(.)) %>%
  mutate(start = pos) %>% mutate(end = pos+49)
input <- input[,c(2,5,6,1, 3)]
names(input) <- c("chr","start", "end", "CGid", "strand")
target <- with(input,
               GRanges( seqnames = Rle(chr),
                        ranges   = IRanges(start, end=end, names=CGid),
                        strand   = Rle(strand(strand)) ))

#create TxDB with masked shrew annotations
library(GenomicFeatures)
txDb <- makeTxDbFromGFF("Sorex-cinereus-v1.0.a2-merged-2021-11-12-17-31-06.gff3", format = "gff3")

#annotating the probes and estimating the CG location
peakAnno <- annotatePeak(target, tssRegion=c(-10000, 1000),
                         TxDb=txDb,
                         sameStrand = FALSE, overlap = "all", addFlankGeneInfo=T)
genomeAnnotation <- data.frame(CGid = peakAnno@anno@ranges@NAMES, peakAnno@anno, 
                             peakAnno@detailGenomicAnnotation)
genomeAnnotation <- genomeAnnotation %>% dplyr::rename(probeStart = start, probeEnd = end)
genomeAnnotation_1 <- aln_2 %>% dplyr::select(qname, targetCG, seq) %>% 
  dplyr::rename(CGid = qname) %>% 
  right_join(genomeAnnotation, by="CGid") %>% 
  mutate(CGstart = probeStart+targetCG, CGend =probeStart+targetCG+1) %>%
  relocate(... = c(CGstart, CGend, seq), .after = strand) %>% dplyr::select(-targetCG)

#not sure why we name columns ..1 ..2 ..3 but will rename back to what they should be later
genomeAnnotation_2 <- genomeAnnotation_1  %>% dplyr::rename(CGstart =...1) %>% dplyr::rename( CGend=...2) %>% dplyr::rename( seq=...3) 

#confirming if the CG is real. This step is done by extracting the sequence from the original FASTA file, this creates a bed file
BEDfile <- genomeAnnotation_2 %>% dplyr::select(seqnames, CGstart, CGend, 
                                     CGid, strand) %>% 
  setnames(new = c("chrom", 'chromStart', 'chromEnd', 'name', "strand")) %>%
  filter(!is.na(chromStart)) %>% mutate(chromStart = chromStart-1) 
write.table(BEDfile, "BEDfile.bed", 
            sep = "\t", row.names=F, col.names=F, quote = F)

#save bed file to directory so can access it not in R
save(BEDfile.bed, file="BEDfile.bed")

#get out of R in terminal, use command line
#use bed file to make fasta
module load bedtools
bedtools getfasta -fi Sorex_cinereus.fasta -bed BEDfile.bed -fo BEDfile.fasta

#get back into R on terminal
#use bed file fasta and create nice data frame with all the necessary information 
CGs <- readDNAStringSet("BEDfile.fasta")
seq_name = names(CGs)
sequence = paste(CGs)
df <- data.frame(seq_name, sequence) %>% dplyr::rename(CG = sequence) %>% 
  mutate(CG = ifelse(CG %in% c("CG", "GC"), TRUE, FALSE))
genomeAnnotation_final <- genomeAnnotation_2 %>% mutate(seq_name = paste(seqnames,":", CGstart-1,"-", CGend, sep = "")) %>% 
  left_join(df) %>% dplyr::select(-seq_name) %>% filter(CG==TRUE) 

#save as csv
write.csv(genomeAnnotation_final, "Anno_sorexcinereus.csv")
















